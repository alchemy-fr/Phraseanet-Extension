#include "base_header.h"

#include "../php_phrasea2/php_phrasea2.h"



//extern SQLCONN *epublisher;

typedef struct	hbal
				{
					unsigned long offset;
					bool closing;
				}
				HBAL;

ZEND_FUNCTION(phrasea_fetch_results) 
{
  SQLCONN *epublisher = PHRASEA2_G(global_epublisher);
  long zsession, zfirstanswer, znanswers;
  long getxml = false;
  char *markin=NULL, *markout=NULL;
  int markin_l=0, markout_l=0;
  zval *zanswer, *zspots, *zspot;
  char tmpstr[1024];	// buffer pour formater les messages 'courts' (messages d'erreur...)
	if(ZEND_NUM_ARGS()==3)
	{
		if(zend_parse_parameters(3 TSRMLS_CC, (char *)"lll", &zsession, &zfirstanswer, &znanswers) == FAILURE)
		{
			RETURN_FALSE;
		}
	}
	else
	{
		if(ZEND_NUM_ARGS()==4)
		{
			if(zend_parse_parameters(4 TSRMLS_CC, (char *)"lllb", &zsession, &zfirstanswer, &znanswers, &getxml) == FAILURE)
			{
				RETURN_FALSE;
			}
		}
		else
		{
			if(ZEND_NUM_ARGS()==6)
			{
				if(zend_parse_parameters(6 TSRMLS_CC, (char *)"lllbss", &zsession, &zfirstanswer, &znanswers, &getxml, &markin, &markin_l, &markout, &markout_l) == FAILURE)
				{
					RETURN_FALSE;
				}
			}
			else
				WRONG_PARAM_COUNT;
		}
	}

	// on a besoin de l'objet session uniquement si on demande le xml
	if(getxml)
	{
/*
		if(!global_session || global_session->get_session_id() != zsession)
		{
			// zend_printf("bad global session : restoring<br>\n");
			if(CACHE_SESSION *tmp_session = new CACHE_SESSION(0))
			{
				if(tmp_session->restore(zsession))
				{
					if(global_session)
						delete global_session;
					global_session = tmp_session;
				}
			}
		}
*/
		if(!PHRASEA2_G(global_session) || PHRASEA2_G(global_session)->get_session_id() != zsession)
		{
			// la session n'existe pas, on ne peut pas continuer
			RETURN_FALSE;
		}
	}

	sprintf(tmpstr, "UPDATE cache SET nact=nact+1, lastaccess=NOW() WHERE session_id=%li", zsession);
	// zend_printf("tmpstr=%s<br>\n", tmpstr);
	if(epublisher->query(tmpstr) && (epublisher->affected_rows() == 1))
	{	
		SQLRES res(epublisher);
		if(zfirstanswer < 1)
			zfirstanswer = 1;
		unsigned long start      = ((zfirstanswer-1) * sizeof(CACHE_ANSWER)) + 1;
		unsigned long len_util   = znanswers * sizeof(CACHE_ANSWER);
		unsigned long len_toread = len_util + sizeof(CACHE_ANSWER);	// on va lire une r�ponse de plus pour savoir o� finissent les spots (o� commencent les spots de la r�ponse suivante)

		sprintf(tmpstr, "SELECT SUBSTRING(answers FROM %li FOR %li) FROM cache WHERE session_id=%li", start, len_toread, zsession);
		// zend_printf("tmpstr=%s<br>\n", tmpstr);
		if(res.query(tmpstr))
		{
			SQLROW *row = res.fetch_row();
			if(row)
			{
				unsigned long *l = res.fetch_lengths();
				if(l[0] >= sizeof(CACHE_ANSWER))
				{
				//	CACHE_ANSWER *panswer = (CACHE_ANSWER *)(row->field(0));
					CACHE_ANSWER *panswer;
					if(panswer = (CACHE_ANSWER *)EMALLOC(l[0]))
					{
						memcpy(panswer, row->field(0), l[0]);

						unsigned long nanswers_cache = l[0] / sizeof(CACHE_ANSWER);
						unsigned long nanswers_utils = nanswers_cache;
						int index0 = 0;
						// zend_printf("fetch : len_util=%li, len=%li ; nanswers_cache=%i<br>\n", len_util, l[0], nanswers_cache);
						if(l[0] >= len_toread)
						{
							// on a le suivant du dernier record pour nous dire o� se terminent les spots
							index0 = panswer[0].spots_index;
							int index1 = panswer[nanswers_cache-1].spots_index;
							sprintf(tmpstr, "SELECT SUBSTRING(spots FROM %i FOR %i) FROM cache WHERE session_id=%li", (index0 * sizeof(CACHE_SPOT)) + 1, (index1-index0) * sizeof(CACHE_SPOT), zsession);
							nanswers_utils--;
						}
						else
						{
							// on a au plus le compte juste de records, donc on ne sait pas o� se terminent les spots
							index0 = panswer[0].spots_index;
							sprintf(tmpstr, "SELECT SUBSTRING(spots FROM %i) FROM cache WHERE session_id=%li", (index0 * sizeof(CACHE_SPOT)) + 1, zsession);
						}
						// zend_printf("sql=%s<br>\n", tmpstr);
						// zend_printf("index0=%i<br>\n", index0);

						// SQLRES resspot(epublisher);
						if(res.query(tmpstr))
						{
							SQLROW *rowspot = res.fetch_row();
							unsigned long *l = res.fetch_lengths();
							unsigned long nspots_cache = l[0] / sizeof(CACHE_SPOT);

							array_init(return_value);

							CACHE_SPOT *pspot0 = (CACHE_SPOT *)(rowspot->field(0));
							for(unsigned long a=0; a<nanswers_utils; a++)
							{
								int nspots = -1;

								if(a < nanswers_cache-1 && (panswer[a+1].spots_index-index0) <= nspots_cache)
									nspots = (panswer[a+1].spots_index - panswer[a].spots_index);

						//		zend_printf("fetch : bid=%i, rid=%i, a=%li, nanswers_cache=%li, si0=%li, si1=%li, nc=%li, nspots=%i<br>\n",
						//			panswer[a].bid,
						//			panswer[a].rid,
						//			a,
						//			nanswers_cache,
						//			panswer[a].spots_index-index0,
						//			a < nanswers_cache-1 ? panswer[a+1].spots_index-index0 : -9999,
						//			nspots_cache,
						//			nspots							
						//			);
								
								MAKE_STD_ZVAL(zanswer);
								array_init(zanswer);

								add_assoc_long(zanswer, (char *)"base_id", panswer[a].bid);
								add_assoc_long(zanswer, (char *)"record_id", panswer[a].rid);
								add_assoc_long(zanswer, (char *)"parent_record_id", panswer[a].prid);
								add_assoc_stringl(zanswer, (char *)"status", panswer[a].status, 16, TRUE);

								if(getxml)
								{
									SQLCONN *conn = PHRASEA2_G(global_session)->connect(panswer[a].bid);
									if(conn)
									{
										SQLRES res(conn);
										sprintf(tmpstr, "SELECT xml FROM record WHERE record_id=%i", panswer[a].rid);
										if(res.query(tmpstr))
										{
											SQLROW *row;
											char *xml;
											if(row = res.fetch_row())
											{
												unsigned long *siz = res.fetch_lengths();
												unsigned long xmlsize = siz[0]+1;
												// zend_printf("xmlsize=%li<br>\n", xmlsize);
												// on compte les spots
												unsigned long s0 = (panswer[a].spots_index-index0);
												if(nspots == -1)
													nspots = nspots_cache - s0;
												// on dimensionne le xml highlight�
												if(xml = (char *)EMALLOC(xmlsize + (nspots * (markin_l+markout_l))))
												{
													memcpy(xml, row->field(0), xmlsize);

													if(nspots>0 && markin && markout)
													{
														HBAL *h;
														if(h = (HBAL *)EMALLOC(2 * nspots * sizeof(HBAL)))
														{
															// on trie les spots en d�croissant
															int s, ss;
															unsigned long t;
															bool b;
															for(s=0; s<nspots; s++)
															{
																h[s*2].offset = pspot0[s0+s].start;
																h[s*2].closing = false;
																h[(s*2) + 1].offset = pspot0[s0+s].start + pspot0[s0+s].len;
																h[(s*2) + 1].closing = true;
															}
															for(s=0; s<(nspots*2)-1; s++)
															{
																for(ss=s+1; ss<(nspots*2); ss++)
																{
																	if(h[s].offset < h[ss].offset)
																	{
																		t = h[s].offset;
																		h[s].offset = h[ss].offset;
																		h[ss].offset = t;
																		b = h[s].closing;
																		h[s].closing = h[ss].closing;
																		h[ss].closing = b;
																	}
																}
															}
															// on ins�re les balises
															for(s=0; s<nspots*2; s++)
															{
																// zend_printf("fetch : h[%li] = {%li , %i}<br>\n", s, h[s].offset, h[s].closing);
																if(h[s].closing && markout_l>0)
																{
																	memmove(xml+h[s].offset+markout_l, xml+h[s].offset, xmlsize-h[s].offset);
																	memcpy(xml+h[s].offset, markout, markout_l);
																	xmlsize += markout_l;
																}
																else
																{
																	if(!h[s].closing && markin_l>0)
																	{
																		memmove(xml+h[s].offset+markin_l, xml+h[s].offset, xmlsize-h[s].offset);
																		memcpy(xml+h[s].offset, markin, markin_l);
																		xmlsize += markin_l;
																	}
																}

															}
															EFREE(h);
														}
													}
													add_assoc_string(zanswer, (char *)"xml", xml, true);

													EFREE(xml);
												}
											}
										}
									}
								}
								MAKE_STD_ZVAL(zspots);
								array_init(zspots);

								for(unsigned long s=(panswer[a].spots_index-index0); (nspots == -1 || nspots-- > 0) && s < nspots_cache; s++)
								{
									MAKE_STD_ZVAL(zspot);
									array_init(zspot);
									add_assoc_long(zspot, (char *)"start", pspot0[s].start);
									add_assoc_long(zspot, (char *)"len", pspot0[s].len);
									add_next_index_zval(zspots, zspot);
								}
								add_assoc_zval(zanswer, (char *)"spots", zspots);
								add_next_index_zval(return_value, zanswer);
							}
						}
						EFREE(panswer);
					}
				}
			}
		}
	}
}
