# Makefile.in generated by automake 1.11.1 from Makefile.am.
# libstemmer_c/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# libstemmer/mkinc.mak: List of stemming module source files
#
# This file is generated by mkmodules.pl from a list of module names.
# Do not edit manually.
#
# Modules included by this file are: danish, dutch, english, finnish, french,
# german, hungarian, italian, norwegian, porter, portuguese, romanian,
# russian, spanish, swedish, turkish



pkgdatadir = $(datadir)/phraseanet-idx
pkgincludedir = $(includedir)/phraseanet-idx
pkglibdir = $(libdir)/phraseanet-idx
pkglibexecdir = $(libexecdir)/phraseanet-idx
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
DIST_COMMON = README $(noinst_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in $(srcdir)/mkinc.mak
subdir = libstemmer_c
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__installdirs = "$(DESTDIR)$(libdir)"
LIBRARIES = $(lib_LIBRARIES)
ARFLAGS = cru
libstemmer_a_AR = $(AR) $(ARFLAGS)
libstemmer_a_LIBADD =
am__objects_1 = stem_ISO_8859_1_danish.$(OBJEXT) \
	stem_UTF_8_danish.$(OBJEXT) stem_ISO_8859_1_dutch.$(OBJEXT) \
	stem_UTF_8_dutch.$(OBJEXT) stem_ISO_8859_1_english.$(OBJEXT) \
	stem_UTF_8_english.$(OBJEXT) stem_ISO_8859_1_finnish.$(OBJEXT) \
	stem_UTF_8_finnish.$(OBJEXT) stem_ISO_8859_1_french.$(OBJEXT) \
	stem_UTF_8_french.$(OBJEXT) stem_ISO_8859_1_german.$(OBJEXT) \
	stem_UTF_8_german.$(OBJEXT) \
	stem_ISO_8859_1_hungarian.$(OBJEXT) \
	stem_UTF_8_hungarian.$(OBJEXT) \
	stem_ISO_8859_1_italian.$(OBJEXT) stem_UTF_8_italian.$(OBJEXT) \
	stem_ISO_8859_1_norwegian.$(OBJEXT) \
	stem_UTF_8_norwegian.$(OBJEXT) \
	stem_ISO_8859_1_porter.$(OBJEXT) stem_UTF_8_porter.$(OBJEXT) \
	stem_ISO_8859_1_portuguese.$(OBJEXT) \
	stem_UTF_8_portuguese.$(OBJEXT) \
	stem_ISO_8859_2_romanian.$(OBJEXT) \
	stem_UTF_8_romanian.$(OBJEXT) stem_KOI8_R_russian.$(OBJEXT) \
	stem_UTF_8_russian.$(OBJEXT) stem_ISO_8859_1_spanish.$(OBJEXT) \
	stem_UTF_8_spanish.$(OBJEXT) stem_ISO_8859_1_swedish.$(OBJEXT) \
	stem_UTF_8_swedish.$(OBJEXT) stem_UTF_8_turkish.$(OBJEXT) \
	api.$(OBJEXT) utilities.$(OBJEXT) libstemmer.$(OBJEXT)
am_libstemmer_a_OBJECTS = $(am__objects_1)
libstemmer_a_OBJECTS = $(am_libstemmer_a_OBJECTS)
DEFAULT_INCLUDES = -I.
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(libstemmer_a_SOURCES)
DIST_SOURCES = $(libstemmer_a_SOURCES)
HEADERS = $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/gaulier/workspace/Phraseanet-Indexer/config/missing --run aclocal-1.11
AMTAR = ${SHELL} /home/gaulier/workspace/Phraseanet-Indexer/config/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/gaulier/workspace/Phraseanet-Indexer/config/missing --run autoconf
AUTOHEADER = ${SHELL} /home/gaulier/workspace/Phraseanet-Indexer/config/missing --run autoheader
AUTOMAKE = ${SHELL} /home/gaulier/workspace/Phraseanet-Indexer/config/missing --run automake-1.11
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS =  -I/usr/include/libxml2 -I/usr/include/mysql  -fno-omit-frame-pointer -g -pipe -Wno-uninitialized   -DUNIV_LINUX -DUNIV_LINUX
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DPACKAGE_NAME=\"Phraseanet-Idx\" -DPACKAGE_TARNAME=\"phraseanet-idx\" -DPACKAGE_VERSION=\"4.0.0.0\" -DPACKAGE_STRING=\"Phraseanet-Idx\ 4.0.0.0\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE_URL=\"\" -DPACKAGE=\"phraseanet-idx\" -DVERSION=\"4.0.0.0\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1 -DLT_OBJDIR=\".libs/\" -DHAVE_LIBMYSQLCLIENT=1 -DHAVE_LIBXML2=1 -DHAVE_LIBEXPAT=1 -DHAVE_LIBPTHREAD=1 -DHAVE_EXPAT_H=1 -DHAVE_FCNTL_H=1 -DHAVE_LIMITS_H=1 -DHAVE_LOCALE_H=1 -DHAVE_MALLOC_H=1 -DHAVE_MEMORY_H=1 -DHAVE_NETINET_IN_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_SYS_SOCKET_H=1 -DHAVE_SYS_TIMEB_H=1 -DHAVE_UNISTD_H=1 -DHAVE_WCHAR_H=1 -DHAVE__BOOL=1 -DHAVE_STDBOOL_H=1 -DHAVE_MEMSET=1 -DHAVE_SELECT=1 -DHAVE_SETLOCALE=1 -DHAVE_SOCKET=1 -DHAVE_STRCASECMP=1 -DHAVE_STRCHR=1 -DHAVE_STRRCHR=1
DEPDIR = .deps
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LIBOBJS = 
LIBS = -lpthread -lexpat -lxml2 -lmysqlclient 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/gaulier/workspace/Phraseanet-Indexer/config/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
MYSQL_CONFIG = /usr/bin/mysql_config
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OSXMYSQLLIBDIR = 
OTOOL = 
OTOOL64 = 
PACKAGE = phraseanet-idx
PACKAGE_BUGREPORT = 
PACKAGE_NAME = Phraseanet-Idx
PACKAGE_STRING = Phraseanet-Idx 4.0.0.0
PACKAGE_TARNAME = phraseanet-idx
PACKAGE_URL = 
PACKAGE_VERSION = 4.0.0.0
PATH_SEPARATOR = :
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
VERSION = 4.0.0.0
abs_builddir = /home/gaulier/workspace/Phraseanet-Indexer/libstemmer_c
abs_srcdir = /home/gaulier/workspace/Phraseanet-Indexer/libstemmer_c
abs_top_builddir = /home/gaulier/workspace/Phraseanet-Indexer
abs_top_srcdir = /home/gaulier/workspace/Phraseanet-Indexer
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/gaulier/workspace/Phraseanet-Indexer/config/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
lib_LIBRARIES = libstemmer.a
snowball_sources = \
  src_c/stem_ISO_8859_1_danish.c \
  src_c/stem_UTF_8_danish.c \
  src_c/stem_ISO_8859_1_dutch.c \
  src_c/stem_UTF_8_dutch.c \
  src_c/stem_ISO_8859_1_english.c \
  src_c/stem_UTF_8_english.c \
  src_c/stem_ISO_8859_1_finnish.c \
  src_c/stem_UTF_8_finnish.c \
  src_c/stem_ISO_8859_1_french.c \
  src_c/stem_UTF_8_french.c \
  src_c/stem_ISO_8859_1_german.c \
  src_c/stem_UTF_8_german.c \
  src_c/stem_ISO_8859_1_hungarian.c \
  src_c/stem_UTF_8_hungarian.c \
  src_c/stem_ISO_8859_1_italian.c \
  src_c/stem_UTF_8_italian.c \
  src_c/stem_ISO_8859_1_norwegian.c \
  src_c/stem_UTF_8_norwegian.c \
  src_c/stem_ISO_8859_1_porter.c \
  src_c/stem_UTF_8_porter.c \
  src_c/stem_ISO_8859_1_portuguese.c \
  src_c/stem_UTF_8_portuguese.c \
  src_c/stem_ISO_8859_2_romanian.c \
  src_c/stem_UTF_8_romanian.c \
  src_c/stem_KOI8_R_russian.c \
  src_c/stem_UTF_8_russian.c \
  src_c/stem_ISO_8859_1_spanish.c \
  src_c/stem_UTF_8_spanish.c \
  src_c/stem_ISO_8859_1_swedish.c \
  src_c/stem_UTF_8_swedish.c \
  src_c/stem_UTF_8_turkish.c \
  runtime/api.c \
  runtime/utilities.c \
  libstemmer/libstemmer.c

snowball_headers = \
  src_c/stem_ISO_8859_1_danish.h \
  src_c/stem_UTF_8_danish.h \
  src_c/stem_ISO_8859_1_dutch.h \
  src_c/stem_UTF_8_dutch.h \
  src_c/stem_ISO_8859_1_english.h \
  src_c/stem_UTF_8_english.h \
  src_c/stem_ISO_8859_1_finnish.h \
  src_c/stem_UTF_8_finnish.h \
  src_c/stem_ISO_8859_1_french.h \
  src_c/stem_UTF_8_french.h \
  src_c/stem_ISO_8859_1_german.h \
  src_c/stem_UTF_8_german.h \
  src_c/stem_ISO_8859_1_hungarian.h \
  src_c/stem_UTF_8_hungarian.h \
  src_c/stem_ISO_8859_1_italian.h \
  src_c/stem_UTF_8_italian.h \
  src_c/stem_ISO_8859_1_norwegian.h \
  src_c/stem_UTF_8_norwegian.h \
  src_c/stem_ISO_8859_1_porter.h \
  src_c/stem_UTF_8_porter.h \
  src_c/stem_ISO_8859_1_portuguese.h \
  src_c/stem_UTF_8_portuguese.h \
  src_c/stem_ISO_8859_2_romanian.h \
  src_c/stem_UTF_8_romanian.h \
  src_c/stem_KOI8_R_russian.h \
  src_c/stem_UTF_8_russian.h \
  src_c/stem_ISO_8859_1_spanish.h \
  src_c/stem_UTF_8_spanish.h \
  src_c/stem_ISO_8859_1_swedish.h \
  src_c/stem_UTF_8_swedish.h \
  src_c/stem_UTF_8_turkish.h \
  include/libstemmer.h \
  libstemmer/modules.h \
  runtime/api.h \
  runtime/header.h

noinst_HEADERS = $(snowball_headers)
libstemmer_a_SOURCES = $(snowball_sources) 
all: all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(srcdir)/mkinc.mak $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu libstemmer_c/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu libstemmer_c/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-libLIBRARIES: $(lib_LIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
	@list='$(lib_LIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(INSTALL_DATA) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(INSTALL_DATA) $$list2 "$(DESTDIR)$(libdir)" || exit $$?; }
	@$(POST_INSTALL)
	@list='$(lib_LIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  if test -f $$p; then \
	    $(am__strip_dir) \
	    echo " ( cd '$(DESTDIR)$(libdir)' && $(RANLIB) $$f )"; \
	    ( cd "$(DESTDIR)$(libdir)" && $(RANLIB) $$f ) || exit $$?; \
	  else :; fi; \
	done

uninstall-libLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LIBRARIES)'; test -n "$(libdir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(libdir)' && rm -f "$$files" )"; \
	cd "$(DESTDIR)$(libdir)" && rm -f $$files

clean-libLIBRARIES:
	-test -z "$(lib_LIBRARIES)" || rm -f $(lib_LIBRARIES)
libstemmer.a: $(libstemmer_a_OBJECTS) $(libstemmer_a_DEPENDENCIES) 
	-rm -f libstemmer.a
	$(libstemmer_a_AR) libstemmer.a $(libstemmer_a_OBJECTS) $(libstemmer_a_LIBADD)
	$(RANLIB) libstemmer.a

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/api.Po
include ./$(DEPDIR)/libstemmer.Po
include ./$(DEPDIR)/stem_ISO_8859_1_danish.Po
include ./$(DEPDIR)/stem_ISO_8859_1_dutch.Po
include ./$(DEPDIR)/stem_ISO_8859_1_english.Po
include ./$(DEPDIR)/stem_ISO_8859_1_finnish.Po
include ./$(DEPDIR)/stem_ISO_8859_1_french.Po
include ./$(DEPDIR)/stem_ISO_8859_1_german.Po
include ./$(DEPDIR)/stem_ISO_8859_1_hungarian.Po
include ./$(DEPDIR)/stem_ISO_8859_1_italian.Po
include ./$(DEPDIR)/stem_ISO_8859_1_norwegian.Po
include ./$(DEPDIR)/stem_ISO_8859_1_porter.Po
include ./$(DEPDIR)/stem_ISO_8859_1_portuguese.Po
include ./$(DEPDIR)/stem_ISO_8859_1_spanish.Po
include ./$(DEPDIR)/stem_ISO_8859_1_swedish.Po
include ./$(DEPDIR)/stem_ISO_8859_2_romanian.Po
include ./$(DEPDIR)/stem_KOI8_R_russian.Po
include ./$(DEPDIR)/stem_UTF_8_danish.Po
include ./$(DEPDIR)/stem_UTF_8_dutch.Po
include ./$(DEPDIR)/stem_UTF_8_english.Po
include ./$(DEPDIR)/stem_UTF_8_finnish.Po
include ./$(DEPDIR)/stem_UTF_8_french.Po
include ./$(DEPDIR)/stem_UTF_8_german.Po
include ./$(DEPDIR)/stem_UTF_8_hungarian.Po
include ./$(DEPDIR)/stem_UTF_8_italian.Po
include ./$(DEPDIR)/stem_UTF_8_norwegian.Po
include ./$(DEPDIR)/stem_UTF_8_porter.Po
include ./$(DEPDIR)/stem_UTF_8_portuguese.Po
include ./$(DEPDIR)/stem_UTF_8_romanian.Po
include ./$(DEPDIR)/stem_UTF_8_russian.Po
include ./$(DEPDIR)/stem_UTF_8_spanish.Po
include ./$(DEPDIR)/stem_UTF_8_swedish.Po
include ./$(DEPDIR)/stem_UTF_8_turkish.Po
include ./$(DEPDIR)/utilities.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

stem_ISO_8859_1_danish.o: src_c/stem_ISO_8859_1_danish.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_danish.o -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_danish.Tpo -c -o stem_ISO_8859_1_danish.o `test -f 'src_c/stem_ISO_8859_1_danish.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_danish.c
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_danish.Tpo $(DEPDIR)/stem_ISO_8859_1_danish.Po
#	source='src_c/stem_ISO_8859_1_danish.c' object='stem_ISO_8859_1_danish.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_danish.o `test -f 'src_c/stem_ISO_8859_1_danish.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_danish.c

stem_ISO_8859_1_danish.obj: src_c/stem_ISO_8859_1_danish.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_danish.obj -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_danish.Tpo -c -o stem_ISO_8859_1_danish.obj `if test -f 'src_c/stem_ISO_8859_1_danish.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_danish.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_danish.c'; fi`
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_danish.Tpo $(DEPDIR)/stem_ISO_8859_1_danish.Po
#	source='src_c/stem_ISO_8859_1_danish.c' object='stem_ISO_8859_1_danish.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_danish.obj `if test -f 'src_c/stem_ISO_8859_1_danish.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_danish.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_danish.c'; fi`

stem_UTF_8_danish.o: src_c/stem_UTF_8_danish.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_danish.o -MD -MP -MF $(DEPDIR)/stem_UTF_8_danish.Tpo -c -o stem_UTF_8_danish.o `test -f 'src_c/stem_UTF_8_danish.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_danish.c
	$(am__mv) $(DEPDIR)/stem_UTF_8_danish.Tpo $(DEPDIR)/stem_UTF_8_danish.Po
#	source='src_c/stem_UTF_8_danish.c' object='stem_UTF_8_danish.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_danish.o `test -f 'src_c/stem_UTF_8_danish.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_danish.c

stem_UTF_8_danish.obj: src_c/stem_UTF_8_danish.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_danish.obj -MD -MP -MF $(DEPDIR)/stem_UTF_8_danish.Tpo -c -o stem_UTF_8_danish.obj `if test -f 'src_c/stem_UTF_8_danish.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_danish.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_danish.c'; fi`
	$(am__mv) $(DEPDIR)/stem_UTF_8_danish.Tpo $(DEPDIR)/stem_UTF_8_danish.Po
#	source='src_c/stem_UTF_8_danish.c' object='stem_UTF_8_danish.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_danish.obj `if test -f 'src_c/stem_UTF_8_danish.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_danish.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_danish.c'; fi`

stem_ISO_8859_1_dutch.o: src_c/stem_ISO_8859_1_dutch.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_dutch.o -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_dutch.Tpo -c -o stem_ISO_8859_1_dutch.o `test -f 'src_c/stem_ISO_8859_1_dutch.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_dutch.c
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_dutch.Tpo $(DEPDIR)/stem_ISO_8859_1_dutch.Po
#	source='src_c/stem_ISO_8859_1_dutch.c' object='stem_ISO_8859_1_dutch.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_dutch.o `test -f 'src_c/stem_ISO_8859_1_dutch.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_dutch.c

stem_ISO_8859_1_dutch.obj: src_c/stem_ISO_8859_1_dutch.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_dutch.obj -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_dutch.Tpo -c -o stem_ISO_8859_1_dutch.obj `if test -f 'src_c/stem_ISO_8859_1_dutch.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_dutch.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_dutch.c'; fi`
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_dutch.Tpo $(DEPDIR)/stem_ISO_8859_1_dutch.Po
#	source='src_c/stem_ISO_8859_1_dutch.c' object='stem_ISO_8859_1_dutch.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_dutch.obj `if test -f 'src_c/stem_ISO_8859_1_dutch.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_dutch.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_dutch.c'; fi`

stem_UTF_8_dutch.o: src_c/stem_UTF_8_dutch.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_dutch.o -MD -MP -MF $(DEPDIR)/stem_UTF_8_dutch.Tpo -c -o stem_UTF_8_dutch.o `test -f 'src_c/stem_UTF_8_dutch.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_dutch.c
	$(am__mv) $(DEPDIR)/stem_UTF_8_dutch.Tpo $(DEPDIR)/stem_UTF_8_dutch.Po
#	source='src_c/stem_UTF_8_dutch.c' object='stem_UTF_8_dutch.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_dutch.o `test -f 'src_c/stem_UTF_8_dutch.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_dutch.c

stem_UTF_8_dutch.obj: src_c/stem_UTF_8_dutch.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_dutch.obj -MD -MP -MF $(DEPDIR)/stem_UTF_8_dutch.Tpo -c -o stem_UTF_8_dutch.obj `if test -f 'src_c/stem_UTF_8_dutch.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_dutch.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_dutch.c'; fi`
	$(am__mv) $(DEPDIR)/stem_UTF_8_dutch.Tpo $(DEPDIR)/stem_UTF_8_dutch.Po
#	source='src_c/stem_UTF_8_dutch.c' object='stem_UTF_8_dutch.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_dutch.obj `if test -f 'src_c/stem_UTF_8_dutch.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_dutch.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_dutch.c'; fi`

stem_ISO_8859_1_english.o: src_c/stem_ISO_8859_1_english.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_english.o -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_english.Tpo -c -o stem_ISO_8859_1_english.o `test -f 'src_c/stem_ISO_8859_1_english.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_english.c
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_english.Tpo $(DEPDIR)/stem_ISO_8859_1_english.Po
#	source='src_c/stem_ISO_8859_1_english.c' object='stem_ISO_8859_1_english.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_english.o `test -f 'src_c/stem_ISO_8859_1_english.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_english.c

stem_ISO_8859_1_english.obj: src_c/stem_ISO_8859_1_english.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_english.obj -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_english.Tpo -c -o stem_ISO_8859_1_english.obj `if test -f 'src_c/stem_ISO_8859_1_english.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_english.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_english.c'; fi`
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_english.Tpo $(DEPDIR)/stem_ISO_8859_1_english.Po
#	source='src_c/stem_ISO_8859_1_english.c' object='stem_ISO_8859_1_english.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_english.obj `if test -f 'src_c/stem_ISO_8859_1_english.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_english.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_english.c'; fi`

stem_UTF_8_english.o: src_c/stem_UTF_8_english.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_english.o -MD -MP -MF $(DEPDIR)/stem_UTF_8_english.Tpo -c -o stem_UTF_8_english.o `test -f 'src_c/stem_UTF_8_english.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_english.c
	$(am__mv) $(DEPDIR)/stem_UTF_8_english.Tpo $(DEPDIR)/stem_UTF_8_english.Po
#	source='src_c/stem_UTF_8_english.c' object='stem_UTF_8_english.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_english.o `test -f 'src_c/stem_UTF_8_english.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_english.c

stem_UTF_8_english.obj: src_c/stem_UTF_8_english.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_english.obj -MD -MP -MF $(DEPDIR)/stem_UTF_8_english.Tpo -c -o stem_UTF_8_english.obj `if test -f 'src_c/stem_UTF_8_english.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_english.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_english.c'; fi`
	$(am__mv) $(DEPDIR)/stem_UTF_8_english.Tpo $(DEPDIR)/stem_UTF_8_english.Po
#	source='src_c/stem_UTF_8_english.c' object='stem_UTF_8_english.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_english.obj `if test -f 'src_c/stem_UTF_8_english.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_english.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_english.c'; fi`

stem_ISO_8859_1_finnish.o: src_c/stem_ISO_8859_1_finnish.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_finnish.o -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_finnish.Tpo -c -o stem_ISO_8859_1_finnish.o `test -f 'src_c/stem_ISO_8859_1_finnish.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_finnish.c
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_finnish.Tpo $(DEPDIR)/stem_ISO_8859_1_finnish.Po
#	source='src_c/stem_ISO_8859_1_finnish.c' object='stem_ISO_8859_1_finnish.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_finnish.o `test -f 'src_c/stem_ISO_8859_1_finnish.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_finnish.c

stem_ISO_8859_1_finnish.obj: src_c/stem_ISO_8859_1_finnish.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_finnish.obj -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_finnish.Tpo -c -o stem_ISO_8859_1_finnish.obj `if test -f 'src_c/stem_ISO_8859_1_finnish.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_finnish.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_finnish.c'; fi`
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_finnish.Tpo $(DEPDIR)/stem_ISO_8859_1_finnish.Po
#	source='src_c/stem_ISO_8859_1_finnish.c' object='stem_ISO_8859_1_finnish.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_finnish.obj `if test -f 'src_c/stem_ISO_8859_1_finnish.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_finnish.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_finnish.c'; fi`

stem_UTF_8_finnish.o: src_c/stem_UTF_8_finnish.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_finnish.o -MD -MP -MF $(DEPDIR)/stem_UTF_8_finnish.Tpo -c -o stem_UTF_8_finnish.o `test -f 'src_c/stem_UTF_8_finnish.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_finnish.c
	$(am__mv) $(DEPDIR)/stem_UTF_8_finnish.Tpo $(DEPDIR)/stem_UTF_8_finnish.Po
#	source='src_c/stem_UTF_8_finnish.c' object='stem_UTF_8_finnish.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_finnish.o `test -f 'src_c/stem_UTF_8_finnish.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_finnish.c

stem_UTF_8_finnish.obj: src_c/stem_UTF_8_finnish.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_finnish.obj -MD -MP -MF $(DEPDIR)/stem_UTF_8_finnish.Tpo -c -o stem_UTF_8_finnish.obj `if test -f 'src_c/stem_UTF_8_finnish.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_finnish.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_finnish.c'; fi`
	$(am__mv) $(DEPDIR)/stem_UTF_8_finnish.Tpo $(DEPDIR)/stem_UTF_8_finnish.Po
#	source='src_c/stem_UTF_8_finnish.c' object='stem_UTF_8_finnish.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_finnish.obj `if test -f 'src_c/stem_UTF_8_finnish.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_finnish.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_finnish.c'; fi`

stem_ISO_8859_1_french.o: src_c/stem_ISO_8859_1_french.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_french.o -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_french.Tpo -c -o stem_ISO_8859_1_french.o `test -f 'src_c/stem_ISO_8859_1_french.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_french.c
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_french.Tpo $(DEPDIR)/stem_ISO_8859_1_french.Po
#	source='src_c/stem_ISO_8859_1_french.c' object='stem_ISO_8859_1_french.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_french.o `test -f 'src_c/stem_ISO_8859_1_french.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_french.c

stem_ISO_8859_1_french.obj: src_c/stem_ISO_8859_1_french.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_french.obj -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_french.Tpo -c -o stem_ISO_8859_1_french.obj `if test -f 'src_c/stem_ISO_8859_1_french.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_french.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_french.c'; fi`
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_french.Tpo $(DEPDIR)/stem_ISO_8859_1_french.Po
#	source='src_c/stem_ISO_8859_1_french.c' object='stem_ISO_8859_1_french.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_french.obj `if test -f 'src_c/stem_ISO_8859_1_french.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_french.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_french.c'; fi`

stem_UTF_8_french.o: src_c/stem_UTF_8_french.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_french.o -MD -MP -MF $(DEPDIR)/stem_UTF_8_french.Tpo -c -o stem_UTF_8_french.o `test -f 'src_c/stem_UTF_8_french.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_french.c
	$(am__mv) $(DEPDIR)/stem_UTF_8_french.Tpo $(DEPDIR)/stem_UTF_8_french.Po
#	source='src_c/stem_UTF_8_french.c' object='stem_UTF_8_french.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_french.o `test -f 'src_c/stem_UTF_8_french.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_french.c

stem_UTF_8_french.obj: src_c/stem_UTF_8_french.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_french.obj -MD -MP -MF $(DEPDIR)/stem_UTF_8_french.Tpo -c -o stem_UTF_8_french.obj `if test -f 'src_c/stem_UTF_8_french.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_french.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_french.c'; fi`
	$(am__mv) $(DEPDIR)/stem_UTF_8_french.Tpo $(DEPDIR)/stem_UTF_8_french.Po
#	source='src_c/stem_UTF_8_french.c' object='stem_UTF_8_french.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_french.obj `if test -f 'src_c/stem_UTF_8_french.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_french.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_french.c'; fi`

stem_ISO_8859_1_german.o: src_c/stem_ISO_8859_1_german.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_german.o -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_german.Tpo -c -o stem_ISO_8859_1_german.o `test -f 'src_c/stem_ISO_8859_1_german.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_german.c
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_german.Tpo $(DEPDIR)/stem_ISO_8859_1_german.Po
#	source='src_c/stem_ISO_8859_1_german.c' object='stem_ISO_8859_1_german.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_german.o `test -f 'src_c/stem_ISO_8859_1_german.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_german.c

stem_ISO_8859_1_german.obj: src_c/stem_ISO_8859_1_german.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_german.obj -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_german.Tpo -c -o stem_ISO_8859_1_german.obj `if test -f 'src_c/stem_ISO_8859_1_german.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_german.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_german.c'; fi`
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_german.Tpo $(DEPDIR)/stem_ISO_8859_1_german.Po
#	source='src_c/stem_ISO_8859_1_german.c' object='stem_ISO_8859_1_german.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_german.obj `if test -f 'src_c/stem_ISO_8859_1_german.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_german.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_german.c'; fi`

stem_UTF_8_german.o: src_c/stem_UTF_8_german.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_german.o -MD -MP -MF $(DEPDIR)/stem_UTF_8_german.Tpo -c -o stem_UTF_8_german.o `test -f 'src_c/stem_UTF_8_german.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_german.c
	$(am__mv) $(DEPDIR)/stem_UTF_8_german.Tpo $(DEPDIR)/stem_UTF_8_german.Po
#	source='src_c/stem_UTF_8_german.c' object='stem_UTF_8_german.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_german.o `test -f 'src_c/stem_UTF_8_german.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_german.c

stem_UTF_8_german.obj: src_c/stem_UTF_8_german.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_german.obj -MD -MP -MF $(DEPDIR)/stem_UTF_8_german.Tpo -c -o stem_UTF_8_german.obj `if test -f 'src_c/stem_UTF_8_german.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_german.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_german.c'; fi`
	$(am__mv) $(DEPDIR)/stem_UTF_8_german.Tpo $(DEPDIR)/stem_UTF_8_german.Po
#	source='src_c/stem_UTF_8_german.c' object='stem_UTF_8_german.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_german.obj `if test -f 'src_c/stem_UTF_8_german.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_german.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_german.c'; fi`

stem_ISO_8859_1_hungarian.o: src_c/stem_ISO_8859_1_hungarian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_hungarian.o -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_hungarian.Tpo -c -o stem_ISO_8859_1_hungarian.o `test -f 'src_c/stem_ISO_8859_1_hungarian.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_hungarian.c
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_hungarian.Tpo $(DEPDIR)/stem_ISO_8859_1_hungarian.Po
#	source='src_c/stem_ISO_8859_1_hungarian.c' object='stem_ISO_8859_1_hungarian.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_hungarian.o `test -f 'src_c/stem_ISO_8859_1_hungarian.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_hungarian.c

stem_ISO_8859_1_hungarian.obj: src_c/stem_ISO_8859_1_hungarian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_hungarian.obj -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_hungarian.Tpo -c -o stem_ISO_8859_1_hungarian.obj `if test -f 'src_c/stem_ISO_8859_1_hungarian.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_hungarian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_hungarian.c'; fi`
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_hungarian.Tpo $(DEPDIR)/stem_ISO_8859_1_hungarian.Po
#	source='src_c/stem_ISO_8859_1_hungarian.c' object='stem_ISO_8859_1_hungarian.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_hungarian.obj `if test -f 'src_c/stem_ISO_8859_1_hungarian.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_hungarian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_hungarian.c'; fi`

stem_UTF_8_hungarian.o: src_c/stem_UTF_8_hungarian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_hungarian.o -MD -MP -MF $(DEPDIR)/stem_UTF_8_hungarian.Tpo -c -o stem_UTF_8_hungarian.o `test -f 'src_c/stem_UTF_8_hungarian.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_hungarian.c
	$(am__mv) $(DEPDIR)/stem_UTF_8_hungarian.Tpo $(DEPDIR)/stem_UTF_8_hungarian.Po
#	source='src_c/stem_UTF_8_hungarian.c' object='stem_UTF_8_hungarian.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_hungarian.o `test -f 'src_c/stem_UTF_8_hungarian.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_hungarian.c

stem_UTF_8_hungarian.obj: src_c/stem_UTF_8_hungarian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_hungarian.obj -MD -MP -MF $(DEPDIR)/stem_UTF_8_hungarian.Tpo -c -o stem_UTF_8_hungarian.obj `if test -f 'src_c/stem_UTF_8_hungarian.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_hungarian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_hungarian.c'; fi`
	$(am__mv) $(DEPDIR)/stem_UTF_8_hungarian.Tpo $(DEPDIR)/stem_UTF_8_hungarian.Po
#	source='src_c/stem_UTF_8_hungarian.c' object='stem_UTF_8_hungarian.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_hungarian.obj `if test -f 'src_c/stem_UTF_8_hungarian.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_hungarian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_hungarian.c'; fi`

stem_ISO_8859_1_italian.o: src_c/stem_ISO_8859_1_italian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_italian.o -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_italian.Tpo -c -o stem_ISO_8859_1_italian.o `test -f 'src_c/stem_ISO_8859_1_italian.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_italian.c
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_italian.Tpo $(DEPDIR)/stem_ISO_8859_1_italian.Po
#	source='src_c/stem_ISO_8859_1_italian.c' object='stem_ISO_8859_1_italian.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_italian.o `test -f 'src_c/stem_ISO_8859_1_italian.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_italian.c

stem_ISO_8859_1_italian.obj: src_c/stem_ISO_8859_1_italian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_italian.obj -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_italian.Tpo -c -o stem_ISO_8859_1_italian.obj `if test -f 'src_c/stem_ISO_8859_1_italian.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_italian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_italian.c'; fi`
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_italian.Tpo $(DEPDIR)/stem_ISO_8859_1_italian.Po
#	source='src_c/stem_ISO_8859_1_italian.c' object='stem_ISO_8859_1_italian.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_italian.obj `if test -f 'src_c/stem_ISO_8859_1_italian.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_italian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_italian.c'; fi`

stem_UTF_8_italian.o: src_c/stem_UTF_8_italian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_italian.o -MD -MP -MF $(DEPDIR)/stem_UTF_8_italian.Tpo -c -o stem_UTF_8_italian.o `test -f 'src_c/stem_UTF_8_italian.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_italian.c
	$(am__mv) $(DEPDIR)/stem_UTF_8_italian.Tpo $(DEPDIR)/stem_UTF_8_italian.Po
#	source='src_c/stem_UTF_8_italian.c' object='stem_UTF_8_italian.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_italian.o `test -f 'src_c/stem_UTF_8_italian.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_italian.c

stem_UTF_8_italian.obj: src_c/stem_UTF_8_italian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_italian.obj -MD -MP -MF $(DEPDIR)/stem_UTF_8_italian.Tpo -c -o stem_UTF_8_italian.obj `if test -f 'src_c/stem_UTF_8_italian.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_italian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_italian.c'; fi`
	$(am__mv) $(DEPDIR)/stem_UTF_8_italian.Tpo $(DEPDIR)/stem_UTF_8_italian.Po
#	source='src_c/stem_UTF_8_italian.c' object='stem_UTF_8_italian.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_italian.obj `if test -f 'src_c/stem_UTF_8_italian.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_italian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_italian.c'; fi`

stem_ISO_8859_1_norwegian.o: src_c/stem_ISO_8859_1_norwegian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_norwegian.o -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_norwegian.Tpo -c -o stem_ISO_8859_1_norwegian.o `test -f 'src_c/stem_ISO_8859_1_norwegian.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_norwegian.c
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_norwegian.Tpo $(DEPDIR)/stem_ISO_8859_1_norwegian.Po
#	source='src_c/stem_ISO_8859_1_norwegian.c' object='stem_ISO_8859_1_norwegian.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_norwegian.o `test -f 'src_c/stem_ISO_8859_1_norwegian.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_norwegian.c

stem_ISO_8859_1_norwegian.obj: src_c/stem_ISO_8859_1_norwegian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_norwegian.obj -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_norwegian.Tpo -c -o stem_ISO_8859_1_norwegian.obj `if test -f 'src_c/stem_ISO_8859_1_norwegian.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_norwegian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_norwegian.c'; fi`
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_norwegian.Tpo $(DEPDIR)/stem_ISO_8859_1_norwegian.Po
#	source='src_c/stem_ISO_8859_1_norwegian.c' object='stem_ISO_8859_1_norwegian.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_norwegian.obj `if test -f 'src_c/stem_ISO_8859_1_norwegian.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_norwegian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_norwegian.c'; fi`

stem_UTF_8_norwegian.o: src_c/stem_UTF_8_norwegian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_norwegian.o -MD -MP -MF $(DEPDIR)/stem_UTF_8_norwegian.Tpo -c -o stem_UTF_8_norwegian.o `test -f 'src_c/stem_UTF_8_norwegian.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_norwegian.c
	$(am__mv) $(DEPDIR)/stem_UTF_8_norwegian.Tpo $(DEPDIR)/stem_UTF_8_norwegian.Po
#	source='src_c/stem_UTF_8_norwegian.c' object='stem_UTF_8_norwegian.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_norwegian.o `test -f 'src_c/stem_UTF_8_norwegian.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_norwegian.c

stem_UTF_8_norwegian.obj: src_c/stem_UTF_8_norwegian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_norwegian.obj -MD -MP -MF $(DEPDIR)/stem_UTF_8_norwegian.Tpo -c -o stem_UTF_8_norwegian.obj `if test -f 'src_c/stem_UTF_8_norwegian.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_norwegian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_norwegian.c'; fi`
	$(am__mv) $(DEPDIR)/stem_UTF_8_norwegian.Tpo $(DEPDIR)/stem_UTF_8_norwegian.Po
#	source='src_c/stem_UTF_8_norwegian.c' object='stem_UTF_8_norwegian.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_norwegian.obj `if test -f 'src_c/stem_UTF_8_norwegian.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_norwegian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_norwegian.c'; fi`

stem_ISO_8859_1_porter.o: src_c/stem_ISO_8859_1_porter.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_porter.o -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_porter.Tpo -c -o stem_ISO_8859_1_porter.o `test -f 'src_c/stem_ISO_8859_1_porter.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_porter.c
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_porter.Tpo $(DEPDIR)/stem_ISO_8859_1_porter.Po
#	source='src_c/stem_ISO_8859_1_porter.c' object='stem_ISO_8859_1_porter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_porter.o `test -f 'src_c/stem_ISO_8859_1_porter.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_porter.c

stem_ISO_8859_1_porter.obj: src_c/stem_ISO_8859_1_porter.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_porter.obj -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_porter.Tpo -c -o stem_ISO_8859_1_porter.obj `if test -f 'src_c/stem_ISO_8859_1_porter.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_porter.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_porter.c'; fi`
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_porter.Tpo $(DEPDIR)/stem_ISO_8859_1_porter.Po
#	source='src_c/stem_ISO_8859_1_porter.c' object='stem_ISO_8859_1_porter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_porter.obj `if test -f 'src_c/stem_ISO_8859_1_porter.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_porter.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_porter.c'; fi`

stem_UTF_8_porter.o: src_c/stem_UTF_8_porter.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_porter.o -MD -MP -MF $(DEPDIR)/stem_UTF_8_porter.Tpo -c -o stem_UTF_8_porter.o `test -f 'src_c/stem_UTF_8_porter.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_porter.c
	$(am__mv) $(DEPDIR)/stem_UTF_8_porter.Tpo $(DEPDIR)/stem_UTF_8_porter.Po
#	source='src_c/stem_UTF_8_porter.c' object='stem_UTF_8_porter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_porter.o `test -f 'src_c/stem_UTF_8_porter.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_porter.c

stem_UTF_8_porter.obj: src_c/stem_UTF_8_porter.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_porter.obj -MD -MP -MF $(DEPDIR)/stem_UTF_8_porter.Tpo -c -o stem_UTF_8_porter.obj `if test -f 'src_c/stem_UTF_8_porter.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_porter.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_porter.c'; fi`
	$(am__mv) $(DEPDIR)/stem_UTF_8_porter.Tpo $(DEPDIR)/stem_UTF_8_porter.Po
#	source='src_c/stem_UTF_8_porter.c' object='stem_UTF_8_porter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_porter.obj `if test -f 'src_c/stem_UTF_8_porter.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_porter.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_porter.c'; fi`

stem_ISO_8859_1_portuguese.o: src_c/stem_ISO_8859_1_portuguese.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_portuguese.o -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_portuguese.Tpo -c -o stem_ISO_8859_1_portuguese.o `test -f 'src_c/stem_ISO_8859_1_portuguese.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_portuguese.c
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_portuguese.Tpo $(DEPDIR)/stem_ISO_8859_1_portuguese.Po
#	source='src_c/stem_ISO_8859_1_portuguese.c' object='stem_ISO_8859_1_portuguese.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_portuguese.o `test -f 'src_c/stem_ISO_8859_1_portuguese.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_portuguese.c

stem_ISO_8859_1_portuguese.obj: src_c/stem_ISO_8859_1_portuguese.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_portuguese.obj -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_portuguese.Tpo -c -o stem_ISO_8859_1_portuguese.obj `if test -f 'src_c/stem_ISO_8859_1_portuguese.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_portuguese.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_portuguese.c'; fi`
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_portuguese.Tpo $(DEPDIR)/stem_ISO_8859_1_portuguese.Po
#	source='src_c/stem_ISO_8859_1_portuguese.c' object='stem_ISO_8859_1_portuguese.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_portuguese.obj `if test -f 'src_c/stem_ISO_8859_1_portuguese.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_portuguese.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_portuguese.c'; fi`

stem_UTF_8_portuguese.o: src_c/stem_UTF_8_portuguese.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_portuguese.o -MD -MP -MF $(DEPDIR)/stem_UTF_8_portuguese.Tpo -c -o stem_UTF_8_portuguese.o `test -f 'src_c/stem_UTF_8_portuguese.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_portuguese.c
	$(am__mv) $(DEPDIR)/stem_UTF_8_portuguese.Tpo $(DEPDIR)/stem_UTF_8_portuguese.Po
#	source='src_c/stem_UTF_8_portuguese.c' object='stem_UTF_8_portuguese.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_portuguese.o `test -f 'src_c/stem_UTF_8_portuguese.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_portuguese.c

stem_UTF_8_portuguese.obj: src_c/stem_UTF_8_portuguese.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_portuguese.obj -MD -MP -MF $(DEPDIR)/stem_UTF_8_portuguese.Tpo -c -o stem_UTF_8_portuguese.obj `if test -f 'src_c/stem_UTF_8_portuguese.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_portuguese.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_portuguese.c'; fi`
	$(am__mv) $(DEPDIR)/stem_UTF_8_portuguese.Tpo $(DEPDIR)/stem_UTF_8_portuguese.Po
#	source='src_c/stem_UTF_8_portuguese.c' object='stem_UTF_8_portuguese.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_portuguese.obj `if test -f 'src_c/stem_UTF_8_portuguese.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_portuguese.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_portuguese.c'; fi`

stem_ISO_8859_2_romanian.o: src_c/stem_ISO_8859_2_romanian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_2_romanian.o -MD -MP -MF $(DEPDIR)/stem_ISO_8859_2_romanian.Tpo -c -o stem_ISO_8859_2_romanian.o `test -f 'src_c/stem_ISO_8859_2_romanian.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_2_romanian.c
	$(am__mv) $(DEPDIR)/stem_ISO_8859_2_romanian.Tpo $(DEPDIR)/stem_ISO_8859_2_romanian.Po
#	source='src_c/stem_ISO_8859_2_romanian.c' object='stem_ISO_8859_2_romanian.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_2_romanian.o `test -f 'src_c/stem_ISO_8859_2_romanian.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_2_romanian.c

stem_ISO_8859_2_romanian.obj: src_c/stem_ISO_8859_2_romanian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_2_romanian.obj -MD -MP -MF $(DEPDIR)/stem_ISO_8859_2_romanian.Tpo -c -o stem_ISO_8859_2_romanian.obj `if test -f 'src_c/stem_ISO_8859_2_romanian.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_2_romanian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_2_romanian.c'; fi`
	$(am__mv) $(DEPDIR)/stem_ISO_8859_2_romanian.Tpo $(DEPDIR)/stem_ISO_8859_2_romanian.Po
#	source='src_c/stem_ISO_8859_2_romanian.c' object='stem_ISO_8859_2_romanian.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_2_romanian.obj `if test -f 'src_c/stem_ISO_8859_2_romanian.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_2_romanian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_2_romanian.c'; fi`

stem_UTF_8_romanian.o: src_c/stem_UTF_8_romanian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_romanian.o -MD -MP -MF $(DEPDIR)/stem_UTF_8_romanian.Tpo -c -o stem_UTF_8_romanian.o `test -f 'src_c/stem_UTF_8_romanian.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_romanian.c
	$(am__mv) $(DEPDIR)/stem_UTF_8_romanian.Tpo $(DEPDIR)/stem_UTF_8_romanian.Po
#	source='src_c/stem_UTF_8_romanian.c' object='stem_UTF_8_romanian.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_romanian.o `test -f 'src_c/stem_UTF_8_romanian.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_romanian.c

stem_UTF_8_romanian.obj: src_c/stem_UTF_8_romanian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_romanian.obj -MD -MP -MF $(DEPDIR)/stem_UTF_8_romanian.Tpo -c -o stem_UTF_8_romanian.obj `if test -f 'src_c/stem_UTF_8_romanian.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_romanian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_romanian.c'; fi`
	$(am__mv) $(DEPDIR)/stem_UTF_8_romanian.Tpo $(DEPDIR)/stem_UTF_8_romanian.Po
#	source='src_c/stem_UTF_8_romanian.c' object='stem_UTF_8_romanian.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_romanian.obj `if test -f 'src_c/stem_UTF_8_romanian.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_romanian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_romanian.c'; fi`

stem_KOI8_R_russian.o: src_c/stem_KOI8_R_russian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_KOI8_R_russian.o -MD -MP -MF $(DEPDIR)/stem_KOI8_R_russian.Tpo -c -o stem_KOI8_R_russian.o `test -f 'src_c/stem_KOI8_R_russian.c' || echo '$(srcdir)/'`src_c/stem_KOI8_R_russian.c
	$(am__mv) $(DEPDIR)/stem_KOI8_R_russian.Tpo $(DEPDIR)/stem_KOI8_R_russian.Po
#	source='src_c/stem_KOI8_R_russian.c' object='stem_KOI8_R_russian.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_KOI8_R_russian.o `test -f 'src_c/stem_KOI8_R_russian.c' || echo '$(srcdir)/'`src_c/stem_KOI8_R_russian.c

stem_KOI8_R_russian.obj: src_c/stem_KOI8_R_russian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_KOI8_R_russian.obj -MD -MP -MF $(DEPDIR)/stem_KOI8_R_russian.Tpo -c -o stem_KOI8_R_russian.obj `if test -f 'src_c/stem_KOI8_R_russian.c'; then $(CYGPATH_W) 'src_c/stem_KOI8_R_russian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_KOI8_R_russian.c'; fi`
	$(am__mv) $(DEPDIR)/stem_KOI8_R_russian.Tpo $(DEPDIR)/stem_KOI8_R_russian.Po
#	source='src_c/stem_KOI8_R_russian.c' object='stem_KOI8_R_russian.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_KOI8_R_russian.obj `if test -f 'src_c/stem_KOI8_R_russian.c'; then $(CYGPATH_W) 'src_c/stem_KOI8_R_russian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_KOI8_R_russian.c'; fi`

stem_UTF_8_russian.o: src_c/stem_UTF_8_russian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_russian.o -MD -MP -MF $(DEPDIR)/stem_UTF_8_russian.Tpo -c -o stem_UTF_8_russian.o `test -f 'src_c/stem_UTF_8_russian.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_russian.c
	$(am__mv) $(DEPDIR)/stem_UTF_8_russian.Tpo $(DEPDIR)/stem_UTF_8_russian.Po
#	source='src_c/stem_UTF_8_russian.c' object='stem_UTF_8_russian.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_russian.o `test -f 'src_c/stem_UTF_8_russian.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_russian.c

stem_UTF_8_russian.obj: src_c/stem_UTF_8_russian.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_russian.obj -MD -MP -MF $(DEPDIR)/stem_UTF_8_russian.Tpo -c -o stem_UTF_8_russian.obj `if test -f 'src_c/stem_UTF_8_russian.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_russian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_russian.c'; fi`
	$(am__mv) $(DEPDIR)/stem_UTF_8_russian.Tpo $(DEPDIR)/stem_UTF_8_russian.Po
#	source='src_c/stem_UTF_8_russian.c' object='stem_UTF_8_russian.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_russian.obj `if test -f 'src_c/stem_UTF_8_russian.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_russian.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_russian.c'; fi`

stem_ISO_8859_1_spanish.o: src_c/stem_ISO_8859_1_spanish.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_spanish.o -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_spanish.Tpo -c -o stem_ISO_8859_1_spanish.o `test -f 'src_c/stem_ISO_8859_1_spanish.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_spanish.c
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_spanish.Tpo $(DEPDIR)/stem_ISO_8859_1_spanish.Po
#	source='src_c/stem_ISO_8859_1_spanish.c' object='stem_ISO_8859_1_spanish.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_spanish.o `test -f 'src_c/stem_ISO_8859_1_spanish.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_spanish.c

stem_ISO_8859_1_spanish.obj: src_c/stem_ISO_8859_1_spanish.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_spanish.obj -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_spanish.Tpo -c -o stem_ISO_8859_1_spanish.obj `if test -f 'src_c/stem_ISO_8859_1_spanish.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_spanish.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_spanish.c'; fi`
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_spanish.Tpo $(DEPDIR)/stem_ISO_8859_1_spanish.Po
#	source='src_c/stem_ISO_8859_1_spanish.c' object='stem_ISO_8859_1_spanish.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_spanish.obj `if test -f 'src_c/stem_ISO_8859_1_spanish.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_spanish.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_spanish.c'; fi`

stem_UTF_8_spanish.o: src_c/stem_UTF_8_spanish.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_spanish.o -MD -MP -MF $(DEPDIR)/stem_UTF_8_spanish.Tpo -c -o stem_UTF_8_spanish.o `test -f 'src_c/stem_UTF_8_spanish.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_spanish.c
	$(am__mv) $(DEPDIR)/stem_UTF_8_spanish.Tpo $(DEPDIR)/stem_UTF_8_spanish.Po
#	source='src_c/stem_UTF_8_spanish.c' object='stem_UTF_8_spanish.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_spanish.o `test -f 'src_c/stem_UTF_8_spanish.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_spanish.c

stem_UTF_8_spanish.obj: src_c/stem_UTF_8_spanish.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_spanish.obj -MD -MP -MF $(DEPDIR)/stem_UTF_8_spanish.Tpo -c -o stem_UTF_8_spanish.obj `if test -f 'src_c/stem_UTF_8_spanish.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_spanish.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_spanish.c'; fi`
	$(am__mv) $(DEPDIR)/stem_UTF_8_spanish.Tpo $(DEPDIR)/stem_UTF_8_spanish.Po
#	source='src_c/stem_UTF_8_spanish.c' object='stem_UTF_8_spanish.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_spanish.obj `if test -f 'src_c/stem_UTF_8_spanish.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_spanish.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_spanish.c'; fi`

stem_ISO_8859_1_swedish.o: src_c/stem_ISO_8859_1_swedish.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_swedish.o -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_swedish.Tpo -c -o stem_ISO_8859_1_swedish.o `test -f 'src_c/stem_ISO_8859_1_swedish.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_swedish.c
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_swedish.Tpo $(DEPDIR)/stem_ISO_8859_1_swedish.Po
#	source='src_c/stem_ISO_8859_1_swedish.c' object='stem_ISO_8859_1_swedish.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_swedish.o `test -f 'src_c/stem_ISO_8859_1_swedish.c' || echo '$(srcdir)/'`src_c/stem_ISO_8859_1_swedish.c

stem_ISO_8859_1_swedish.obj: src_c/stem_ISO_8859_1_swedish.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_ISO_8859_1_swedish.obj -MD -MP -MF $(DEPDIR)/stem_ISO_8859_1_swedish.Tpo -c -o stem_ISO_8859_1_swedish.obj `if test -f 'src_c/stem_ISO_8859_1_swedish.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_swedish.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_swedish.c'; fi`
	$(am__mv) $(DEPDIR)/stem_ISO_8859_1_swedish.Tpo $(DEPDIR)/stem_ISO_8859_1_swedish.Po
#	source='src_c/stem_ISO_8859_1_swedish.c' object='stem_ISO_8859_1_swedish.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_ISO_8859_1_swedish.obj `if test -f 'src_c/stem_ISO_8859_1_swedish.c'; then $(CYGPATH_W) 'src_c/stem_ISO_8859_1_swedish.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_ISO_8859_1_swedish.c'; fi`

stem_UTF_8_swedish.o: src_c/stem_UTF_8_swedish.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_swedish.o -MD -MP -MF $(DEPDIR)/stem_UTF_8_swedish.Tpo -c -o stem_UTF_8_swedish.o `test -f 'src_c/stem_UTF_8_swedish.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_swedish.c
	$(am__mv) $(DEPDIR)/stem_UTF_8_swedish.Tpo $(DEPDIR)/stem_UTF_8_swedish.Po
#	source='src_c/stem_UTF_8_swedish.c' object='stem_UTF_8_swedish.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_swedish.o `test -f 'src_c/stem_UTF_8_swedish.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_swedish.c

stem_UTF_8_swedish.obj: src_c/stem_UTF_8_swedish.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_swedish.obj -MD -MP -MF $(DEPDIR)/stem_UTF_8_swedish.Tpo -c -o stem_UTF_8_swedish.obj `if test -f 'src_c/stem_UTF_8_swedish.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_swedish.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_swedish.c'; fi`
	$(am__mv) $(DEPDIR)/stem_UTF_8_swedish.Tpo $(DEPDIR)/stem_UTF_8_swedish.Po
#	source='src_c/stem_UTF_8_swedish.c' object='stem_UTF_8_swedish.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_swedish.obj `if test -f 'src_c/stem_UTF_8_swedish.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_swedish.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_swedish.c'; fi`

stem_UTF_8_turkish.o: src_c/stem_UTF_8_turkish.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_turkish.o -MD -MP -MF $(DEPDIR)/stem_UTF_8_turkish.Tpo -c -o stem_UTF_8_turkish.o `test -f 'src_c/stem_UTF_8_turkish.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_turkish.c
	$(am__mv) $(DEPDIR)/stem_UTF_8_turkish.Tpo $(DEPDIR)/stem_UTF_8_turkish.Po
#	source='src_c/stem_UTF_8_turkish.c' object='stem_UTF_8_turkish.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_turkish.o `test -f 'src_c/stem_UTF_8_turkish.c' || echo '$(srcdir)/'`src_c/stem_UTF_8_turkish.c

stem_UTF_8_turkish.obj: src_c/stem_UTF_8_turkish.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT stem_UTF_8_turkish.obj -MD -MP -MF $(DEPDIR)/stem_UTF_8_turkish.Tpo -c -o stem_UTF_8_turkish.obj `if test -f 'src_c/stem_UTF_8_turkish.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_turkish.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_turkish.c'; fi`
	$(am__mv) $(DEPDIR)/stem_UTF_8_turkish.Tpo $(DEPDIR)/stem_UTF_8_turkish.Po
#	source='src_c/stem_UTF_8_turkish.c' object='stem_UTF_8_turkish.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o stem_UTF_8_turkish.obj `if test -f 'src_c/stem_UTF_8_turkish.c'; then $(CYGPATH_W) 'src_c/stem_UTF_8_turkish.c'; else $(CYGPATH_W) '$(srcdir)/src_c/stem_UTF_8_turkish.c'; fi`

api.o: runtime/api.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT api.o -MD -MP -MF $(DEPDIR)/api.Tpo -c -o api.o `test -f 'runtime/api.c' || echo '$(srcdir)/'`runtime/api.c
	$(am__mv) $(DEPDIR)/api.Tpo $(DEPDIR)/api.Po
#	source='runtime/api.c' object='api.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o api.o `test -f 'runtime/api.c' || echo '$(srcdir)/'`runtime/api.c

api.obj: runtime/api.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT api.obj -MD -MP -MF $(DEPDIR)/api.Tpo -c -o api.obj `if test -f 'runtime/api.c'; then $(CYGPATH_W) 'runtime/api.c'; else $(CYGPATH_W) '$(srcdir)/runtime/api.c'; fi`
	$(am__mv) $(DEPDIR)/api.Tpo $(DEPDIR)/api.Po
#	source='runtime/api.c' object='api.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o api.obj `if test -f 'runtime/api.c'; then $(CYGPATH_W) 'runtime/api.c'; else $(CYGPATH_W) '$(srcdir)/runtime/api.c'; fi`

utilities.o: runtime/utilities.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT utilities.o -MD -MP -MF $(DEPDIR)/utilities.Tpo -c -o utilities.o `test -f 'runtime/utilities.c' || echo '$(srcdir)/'`runtime/utilities.c
	$(am__mv) $(DEPDIR)/utilities.Tpo $(DEPDIR)/utilities.Po
#	source='runtime/utilities.c' object='utilities.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o utilities.o `test -f 'runtime/utilities.c' || echo '$(srcdir)/'`runtime/utilities.c

utilities.obj: runtime/utilities.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT utilities.obj -MD -MP -MF $(DEPDIR)/utilities.Tpo -c -o utilities.obj `if test -f 'runtime/utilities.c'; then $(CYGPATH_W) 'runtime/utilities.c'; else $(CYGPATH_W) '$(srcdir)/runtime/utilities.c'; fi`
	$(am__mv) $(DEPDIR)/utilities.Tpo $(DEPDIR)/utilities.Po
#	source='runtime/utilities.c' object='utilities.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o utilities.obj `if test -f 'runtime/utilities.c'; then $(CYGPATH_W) 'runtime/utilities.c'; else $(CYGPATH_W) '$(srcdir)/runtime/utilities.c'; fi`

libstemmer.o: libstemmer/libstemmer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libstemmer.o -MD -MP -MF $(DEPDIR)/libstemmer.Tpo -c -o libstemmer.o `test -f 'libstemmer/libstemmer.c' || echo '$(srcdir)/'`libstemmer/libstemmer.c
	$(am__mv) $(DEPDIR)/libstemmer.Tpo $(DEPDIR)/libstemmer.Po
#	source='libstemmer/libstemmer.c' object='libstemmer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libstemmer.o `test -f 'libstemmer/libstemmer.c' || echo '$(srcdir)/'`libstemmer/libstemmer.c

libstemmer.obj: libstemmer/libstemmer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libstemmer.obj -MD -MP -MF $(DEPDIR)/libstemmer.Tpo -c -o libstemmer.obj `if test -f 'libstemmer/libstemmer.c'; then $(CYGPATH_W) 'libstemmer/libstemmer.c'; else $(CYGPATH_W) '$(srcdir)/libstemmer/libstemmer.c'; fi`
	$(am__mv) $(DEPDIR)/libstemmer.Tpo $(DEPDIR)/libstemmer.Po
#	source='libstemmer/libstemmer.c' object='libstemmer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libstemmer.obj `if test -f 'libstemmer/libstemmer.c'; then $(CYGPATH_W) 'libstemmer/libstemmer.c'; else $(CYGPATH_W) '$(srcdir)/libstemmer/libstemmer.c'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(libdir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libLIBRARIES clean-libtool \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-libLIBRARIES

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-libLIBRARIES

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libLIBRARIES clean-libtool ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am \
	install-libLIBRARIES install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-libLIBRARIES

# libstemmer_a_LIBADD = -lm
# libstemmer_la_LIBADD = -lm

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
